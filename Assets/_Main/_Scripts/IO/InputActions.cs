//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Main/_Scripts/IO/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""097095ec-854e-408d-99d9-8340c1d27a42"",
            ""actions"": [
                {
                    ""name"": ""AdvanceAction"",
                    ""type"": ""Button"",
                    ""id"": ""f4c70e3d-c7c9-4575-b403-2135b91d8c9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AutoAction"",
                    ""type"": ""Button"",
                    ""id"": ""1074b929-f3d5-4707-8a5f-2dd37a9b7005"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipAction"",
                    ""type"": ""Button"",
                    ""id"": ""a21e172e-7e8a-4f26-a487-ef588f11ac6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipHoldAction"",
                    ""type"": ""Button"",
                    ""id"": ""761eeb8b-f975-4309-a817-158bc9d5a34e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e566561-99b2-4b39-8da8-6ff0251f8527"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdvanceAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""992dccef-f248-484b-aa45-4e367d2132e9"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AdvanceAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f75381d-b44c-4d25-a018-09c191bdc11d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AutoAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06c7aecb-feb6-46cf-a71a-90fbc0dde8bd"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49480f45-3fd7-4395-812c-528558e6c5d9"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": ""Hold(duration=0.5,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipHoldAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_AdvanceAction = m_Game.FindAction("AdvanceAction", throwIfNotFound: true);
        m_Game_AutoAction = m_Game.FindAction("AutoAction", throwIfNotFound: true);
        m_Game_SkipAction = m_Game.FindAction("SkipAction", throwIfNotFound: true);
        m_Game_SkipHoldAction = m_Game.FindAction("SkipHoldAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_AdvanceAction;
    private readonly InputAction m_Game_AutoAction;
    private readonly InputAction m_Game_SkipAction;
    private readonly InputAction m_Game_SkipHoldAction;
    public struct GameActions
    {
        private @InputActions m_Wrapper;
        public GameActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @AdvanceAction => m_Wrapper.m_Game_AdvanceAction;
        public InputAction @AutoAction => m_Wrapper.m_Game_AutoAction;
        public InputAction @SkipAction => m_Wrapper.m_Game_SkipAction;
        public InputAction @SkipHoldAction => m_Wrapper.m_Game_SkipHoldAction;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @AdvanceAction.started += instance.OnAdvanceAction;
            @AdvanceAction.performed += instance.OnAdvanceAction;
            @AdvanceAction.canceled += instance.OnAdvanceAction;
            @AutoAction.started += instance.OnAutoAction;
            @AutoAction.performed += instance.OnAutoAction;
            @AutoAction.canceled += instance.OnAutoAction;
            @SkipAction.started += instance.OnSkipAction;
            @SkipAction.performed += instance.OnSkipAction;
            @SkipAction.canceled += instance.OnSkipAction;
            @SkipHoldAction.started += instance.OnSkipHoldAction;
            @SkipHoldAction.performed += instance.OnSkipHoldAction;
            @SkipHoldAction.canceled += instance.OnSkipHoldAction;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @AdvanceAction.started -= instance.OnAdvanceAction;
            @AdvanceAction.performed -= instance.OnAdvanceAction;
            @AdvanceAction.canceled -= instance.OnAdvanceAction;
            @AutoAction.started -= instance.OnAutoAction;
            @AutoAction.performed -= instance.OnAutoAction;
            @AutoAction.canceled -= instance.OnAutoAction;
            @SkipAction.started -= instance.OnSkipAction;
            @SkipAction.performed -= instance.OnSkipAction;
            @SkipAction.canceled -= instance.OnSkipAction;
            @SkipHoldAction.started -= instance.OnSkipHoldAction;
            @SkipHoldAction.performed -= instance.OnSkipHoldAction;
            @SkipHoldAction.canceled -= instance.OnSkipHoldAction;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnAdvanceAction(InputAction.CallbackContext context);
        void OnAutoAction(InputAction.CallbackContext context);
        void OnSkipAction(InputAction.CallbackContext context);
        void OnSkipHoldAction(InputAction.CallbackContext context);
    }
}
